<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlocklyForHouse.Transform</name>
    </assembly>
    <members>
        <member name="T:BlocklyForHouse.Transform.BlocklyTransformer">
            <summary>
            Tranformation component for BlocklyForHouse
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.BlocklyTransformer.XmlToPython(System.String)">
            <summary>
            Transform xml text from BlocklyForHouse to Python
            </summary>
            <param name="text">XML text generated by BlocklyForHouse</param>
            <returns>Separate string - Python programs for script installation</returns>
        </member>
        <member name="M:BlocklyForHouse.Transform.BlocklyTransformer.AddSpaces(System.Int32)">
            <summary>
            Add space indention to code
            </summary>
            <param name="count">lvl of indention</param>
            <returns>correct number of spaces</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.LiteralsPython">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.AddScript">
            <summary>
              Ищет локализованную строку, похожую на add_script({0},event,body).
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.Body">
            <summary>
              Ищет локализованную строку, похожую на def body():.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.DoorClose">
            <summary>
              Ищет локализованную строку, похожую на close.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.DoorCreate">
            <summary>
              Ищет локализованную строку, похожую на door.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.DoorIsOpen">
            <summary>
              Ищет локализованную строку, похожую на is_open.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.DoorOpen">
            <summary>
              Ищет локализованную строку, похожую на open.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.EmptyBody">
            <summary>
              Ищет локализованную строку, похожую на pass.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.EmptyEvent">
            <summary>
              Ищет локализованную строку, похожую на false.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.Event">
            <summary>
              Ищет локализованную строку, похожую на def event():.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.EventStart">
            <summary>
              Ищет локализованную строку, похожую на return .
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.FunctionCall">
            <summary>
              Ищет локализованную строку, похожую на {0}({1}).
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.Humidity">
            <summary>
              Ищет локализованную строку, похожую на humidity.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.HumidityGet">
            <summary>
              Ищет локализованную строку, похожую на hum_get.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.HumiditySensorCreate">
            <summary>
              Ищет локализованную строку, похожую на hum_sensor.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.Illuminance">
            <summary>
              Ищет локализованную строку, похожую на illuminance.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.IlluminanceGet">
            <summary>
              Ищет локализованную строку, похожую на il_get.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.IlluminanceSensorCreate">
            <summary>
              Ищет локализованную строку, похожую на il_sensor.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.Import">
            <summary>
              Ищет локализованную строку, похожую на import {0}.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.LampCreate">
            <summary>
              Ищет локализованную строку, похожую на lamp.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.LampIsOn">
            <summary>
              Ищет локализованную строку, похожую на is_on.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.LampOff">
            <summary>
              Ищет локализованную строку, похожую на off.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.LampOn">
            <summary>
              Ищет локализованную строку, похожую на on.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.MethodCall">
            <summary>
              Ищет локализованную строку, похожую на {0}.{1}().
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.PackageName">
            <summary>
              Ищет локализованную строку, похожую на BlocklyForHousePy.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.Temperature">
            <summary>
              Ищет локализованную строку, похожую на temperature.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.TemperatureGet">
            <summary>
              Ищет локализованную строку, похожую на tem_get.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.LiteralsPython.TemperatureSensorCreate">
            <summary>
              Ищет локализованную строку, похожую на tem_sensor.
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.TypeLiteralsXml">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Arithmetic">
            <summary>
              Ищет локализованную строку, похожую на math_arithmetic.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.CloseDoor">
            <summary>
              Ищет локализованную строку, похожую на close_door.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Compare">
            <summary>
              Ищет локализованную строку, похожую на logic_compare.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Door">
            <summary>
              Ищет локализованную строку, похожую на door.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.DoorIsOpen">
            <summary>
              Ищет локализованную строку, похожую на door_is_open.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.GetHumidity">
            <summary>
              Ищет локализованную строку, похожую на hum_get.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.GetIlluminance">
            <summary>
              Ищет локализованную строку, похожую на il_get.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.GetTemperature">
            <summary>
              Ищет локализованную строку, похожую на tem_get.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Humidity">
            <summary>
              Ищет локализованную строку, похожую на humidity.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.HumiditySensor">
            <summary>
              Ищет локализованную строку, похожую на hum_sensor.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Illuminance">
            <summary>
              Ищет локализованную строку, похожую на illuminance.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.IlluminanceSensor">
            <summary>
              Ищет локализованную строку, похожую на il_sensor.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Lamp">
            <summary>
              Ищет локализованную строку, похожую на lamp.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.LampIsOn">
            <summary>
              Ищет локализованную строку, похожую на lamp_is_on.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Number">
            <summary>
              Ищет локализованную строку, похожую на math_number.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.OpenDoor">
            <summary>
              Ищет локализованную строку, похожую на open_door.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Script">
            <summary>
              Ищет локализованную строку, похожую на script.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Temperature">
            <summary>
              Ищет локализованную строку, похожую на temperature.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.TemperatureSensor">
            <summary>
              Ищет локализованную строку, похожую на tem_sensor.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.Text">
            <summary>
              Ищет локализованную строку, похожую на text.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.TurnOffLamp">
            <summary>
              Ищет локализованную строку, похожую на off_lamp.
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.TypeLiteralsXml.TurnOnLamp">
            <summary>
              Ищет локализованную строку, похожую на on_lamp.
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.AbstractExpression">
            <summary>
            abstraction of expressions inside xml input
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.AbstractExpression.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret some context
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Code in Python</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.CloseDoor">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;close_door&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Door">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;door&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.DoorIsOpen">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;door_is_open&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.OpenDoor">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;open_door&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Lamp">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;lamp&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.LampIsOn">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;lamp_is_on&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.TurnOffLamp">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;off_lamp&quot;&gt;</para>
            /// </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.TurnOnLamp">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;on_lamp&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Block">
            <summary>
            <para>&lt;block type=&quot;...&quot;&gt;</para>
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.XmlToPython.Blocks.Block.TypeName">
            <summary>
            Name of the type attribute of block
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Blocks.Block.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Block"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.FunctionCallBlock`1">
            <summary>
            Class of block which are simple function calls
            </summary>
            <typeparam name="InputValueType">Input value type</typeparam>
        </member>
        <member name="P:BlocklyForHouse.Transform.XmlToPython.Blocks.FunctionCallBlock`1.FunctionLiteral">
            <summary>
            Literal for function
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Blocks.FunctionCallBlock`1.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.FunctionCallBlock`1"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Math.Arithmetic">
            <summary>
            <para>&lt;block type=&quot;math_arithmetic&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Blocks.Math.Arithmetic.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Math.Arithmetic"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Math.Number">
            <summary>
            <para>&lt;block type=&quot;math_number&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Blocks.Math.Number.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Math.Number"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.MethodCallBlock`1">
            <summary>
            Class of block which are simple method calls
            </summary>
            <typeparam name="InputValueType">Input value type</typeparam>
        </member>
        <member name="P:BlocklyForHouse.Transform.XmlToPython.Blocks.MethodCallBlock`1.FunctionLiteral">
            <summary>
            Literal for function
            </summary>
        </member>
        <member name="P:BlocklyForHouse.Transform.XmlToPython.Blocks.MethodCallBlock`1.NeedNextCheck">
            <summary>
            Is it needed to call <see cref="M:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.NextCheck"/>
            <para>By default it is set to true only if block has attribute <see cref="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.BodyCommandAttribute"/></para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Blocks.MethodCallBlock`1.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.MethodCallBlock`1"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Script">
            <summary>
            <para>&lt;block type=&quot;script&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Blocks.Script.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Script"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.GetHumidity">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;hum_get&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Humidity">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;humidity&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.HumiditySensor">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;hum_sensor&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.GetIlluminance">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;il_get&quot;&gt;</para>
            /// </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Illuminance">
            <summary>
            For xml input:
            <para>&lt;block type=&quot;illuminance&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.IlluminanceSensor">
            <summary>
            <para>&lt;block type=&quot;il_sensor&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.GetTemperature">
            <summary>
            <para>&lt;block type=&quot;tem_get&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Temperature">
            <summary>
            <para>&lt;block type=&quot;temperature&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.TemperatureSensor">
            <summary>
            <para>&lt;block type=&quot;tem_sensor&quot;&gt;</para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.TemperatureUnit">
            <summary>
            Units of mesurement for <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Temperature"/>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Text">
            <summary>
            <para>&lt;block type=&quot;text&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Blocks.Text.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Text"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.BodyCommandAttribute">
            <summary>
            Attribute for blocks, used as commands inside the body of <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Script"/>
            <para>Block classes are caught in <see cref="T:BlocklyForHouse.Transform.XmlToPython.Statements.Body"/> with <see cref="M:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.XmlTypeAttribute.GetBlocks``1"/></para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.BooleanAttribute">
            <summary>
            Attribute for blocks, that return boolean value 
            <para>used as triggers for <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Script"/></para>
            <para>Block classes are caught in <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Event"/> with <see cref="M:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.XmlTypeAttribute.GetBlocks``1"/></para>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.ComparableAttribute">
            <summary>
            for blocks, that can be compared
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.EquitableAttribute">
            <summary>
            for blocks, that can be checked if they are equal
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.NumberAttribute">
            <summary>
            Attribute for blocks, that return numeric value 
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.XmlTypeAttribute">
            <summary>
            Attribute for blocks, which should be found for detection
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.XmlTypeAttribute.GetBlocks``1">
            <summary>
            Find all classes of <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Block"/> with some <see cref="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.XmlTypeAttribute"/> T
            </summary>
            <typeparam name="T">Attribute, which implements <see cref="T:BlocklyForHouse.Transform.XmlToPython.Custom_attributes.XmlTypeAttribute"/></typeparam>
            <returns>Dictionary of <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Block"/> with keys - <see cref="P:BlocklyForHouse.Transform.XmlToPython.Blocks.Block.TypeName"/></returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Field">
            <summary>
            <para>&lt;field&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Field.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Field"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Statements.Body">
            <summary>
            <see cref="T:BlocklyForHouse.Transform.XmlToPython.Statements.Statement"/> for actions inside <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Script"/>
            <para>&lt;statement type=&quot;body&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Statements.Body.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Statements.Body"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="P:BlocklyForHouse.Transform.XmlToPython.Statements.Body.Blocks">
            <summary>
            Blocks, which could be used as actions inside <see cref="T:BlocklyForHouse.Transform.XmlToPython.Statements.Body"/>
            </summary>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Statements.Statement">
            <summary>
            <para>&lt;statement type=&quot;...&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Statements.Statement.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Statements.Statement"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.Door">
            <summary>
            <para>&lt;value type=&quot;door&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.Door.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Door"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.Lamp">
            <summary>
            <para>&lt;value type=&quot;lamp&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.Lamp.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Lamp"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.Event">
            <summary>
            <para>&lt;value type=&quot;event&quot;&gt;</para>
            <para>used inside <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Script"/></para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.Event.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Event"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.Name">
            <summary>
            <para>&lt;value type=&quot;name&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.Name.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Name"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.Humidity">
            <summary>
            <para>&lt;value type=&quot;humidity&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.Humidity.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Humidity"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.HumiditySensor">
            <summary>
            <para>&lt;value type=&quot;hum_sensor&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.HumiditySensor.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.HumiditySensor"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.Illuminance">
            <summary>
            <para>&lt;value type=&quot;illuminance&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.Illuminance.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Illuminance"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.IlluminanceSensor">
            <summary>
            <para>&lt;value type=&quot;il_sensor&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.IlluminanceSensor.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.IlluminanceSensor"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.Temperature">
            <summary>
            <para>&lt;value type=&quot;temperature&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.Temperature.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Temperature"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.TemperatureSensor">
            <summary>
            <para>&lt;value type=&quot;tem_sensor&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.TemperatureSensor.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.TemperatureSensor"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.Values.Value">
            <summary>
            <para>&lt;value type=&quot;...&quot;&gt;</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.Values.Value.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)">
            <summary>
            Interpret context as <see cref="T:BlocklyForHouse.Transform.XmlToPython.Values.Value"/>
            </summary>
            <param name="context">Context to interpret</param>
            <returns>Python code</returns>
        </member>
        <member name="T:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext">
            <summary>
            Context of transformation
            </summary>
        </member>
        <member name="F:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.currentNode">
            <summary>
            current xml node of context
            </summary>
        </member>
        <member name="F:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.tabCount">
            <summary>
            number of space identions inside current context
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext"/>
            </summary>
            <param name="text">Xml text</param>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.NextNode">
            <summary>
            Set <see cref="F:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.currentNode"/> on first child of current node
            <para>Attention! Make sure there is only one child or other children are taken in consideration</para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.ParentNode">
            <summary>
            Set <see cref="F:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.currentNode"/> on parent node of current node
            <para>Attention! Make sure not to use it, when current node is <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.Script"/></para>
            </summary>
        </member>
        <member name="M:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.NextCheck">
            <summary>
            Check if there is next xml tag avaliable
            </summary>
            <example>
            Consider this input:
            <code>
            &lt;block type=&quot;smt&quot;&gt;
            ...
            &lt;next&gt;
            ...
            &lt;/next&gt;
            &lt;/block&gt;
            </code>
            It is much more convinient to consider the content of &quot;next&quot; as the block on same lvl
            For example, this is used inside <see cref="T:BlocklyForHouse.Transform.XmlToPython.Statements.Body"/>:
            <code>
            XmlNode prev;
            do
            {
                prev = context.currentNode;
                result += BlocklyTransformer.AddSpaces(context.tabCount)
                + (Blocks[context.currentNode.Attributes[&quot;type&quot;].Value]).Interpret(ref context) + &quot;\n&quot;;
            } while (prev!=context.currentNode);
            </code>
            And here is the use of <see cref="M:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.NextCheck"/> in <see cref="!:Blocks.OpenDoor.Interpret(ref XmlToPythonContext)"/>:
            <code>
            base.Interpret(ref context);
            context.NextNode();
            var result = (new Values.Door().Interpret(ref context)) + &quot;.&quot; + LiteralsPython.DoorOpen + &quot;()&quot;;
            context.ParentNode();
            context.NextCheck();
            return result;
            </code>
            Suppose we have such input:
            <code>
            &lt;block type=&quot;open_door&quot;&gt;
            ...
            &lt;next&gt;
            &lt;block type=&quot;open_door&quot;&gt;
            ...
            &lt;/block&gt;
            &lt;/next&gt;
            &lt;/block&gt;
            </code>
            When we will be done with first iteration inside <see cref="M:BlocklyForHouse.Transform.XmlToPython.Statements.Body.Interpret(BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext@)"/>,
            <see cref="F:BlocklyForHouse.Transform.XmlToPython.XmlToPythonContext.currentNode"/> will point to next <see cref="T:BlocklyForHouse.Transform.XmlToPython.Blocks.OpenDoor"/> block
            
            </example>
        </member>
    </members>
</doc>
